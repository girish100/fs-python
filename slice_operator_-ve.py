# slice operator in  backward (-ve) direction
import time
str = "core python"
print('slice operator in  backward (-ve) direction')
print()
j = -len(str)
for i in range(len(str)):
    print(str[i],'=',j, end= " ")
    j += 1
print()
print()
print("test case 1 ")
print(str[-1:-6:-1])
print()
print("test case 2 ")
print(str[-1:-10:-1])
print()
print("test case 3 ")
print(str[-1:-2:-1])
print()
print("test case 4 ")
print(str[:-2])
print()
print("test case 5 ")
print(str[-8:])
print()
print("test case 6 ")
print(str[-2:-8])
print()
print("test case 7 ")
print(str[-11:-1])
print()
print("test case 8 ")
print(str[-1:-8:-3])
print()
print("test case 9 ")
print(str[-5:-10])
print()
print("test case 10 ")
print(str[-1])
print()
print("test case 11 ")
print(str[-8])
print()
print("test case 12 ")
print(str[:-2])
print()
print("test case 13 ")
print(str[-1:-9:-3])
print()
print("test case 14 ")
print(str[-2:-2]) #empty string
print()
print("test case 15")
print(str[-2:-8:-2])
print()
print("test case 16 ")
print(str[-5:-10:-1])
print()
print("test case 17 ")
print(str[-8:-1:1])
print()
print("test case 18 ")
print(str[-2:-3:-1])
print()
print("test case 19 ")
print(str[-1:-5:-2])
print()
print("test case 20 ")
print(str[-3:-7:-3])
print()
print("test case 21 ")
print(str[-1:-9:-3])
print()
print("test case 22 ")
print(str[-1:-11:-4])
print()
print("test case 23 ")
print(str[-1:-11:-5])
print()
print("test case 24 ")
print(str[-5:-11:-1])
print()
print("test case 25 ")
print(str[-7:-10:-1])
print()
print('''In neagtive direction, if the step value is left empty or no '-ve' 
number is placed, the PVM bydefault considers nearest +ve no. as
step value which is +1 for 0 and the result is empty string''')
print()
print("so the test  cases 6, 9 are empty")
time.sleep(2)
print("End of code")
